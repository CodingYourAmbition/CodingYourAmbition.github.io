<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="/design-pattern/composite.html"/>
    <url>/design-pattern/composite.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>组合模式（Composite），将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>简化了客户端代码，统一地处理复合结构和单个对象</li><li>更容易添加新类型的组件，不需要更改现有代码</li></ul><h2 id="什么时候使用组合模式"><a href="#什么时候使用组合模式" class="headerlink" title="什么时候使用组合模式"></a>什么时候使用组合模式</h2><ul><li>你希望表示对象的部分-整体层次结构</li><li>你希望客户端能够忽略对象组合和单个对象之间的差异。客户端将统一地对待复合结构中的所有对象</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>每个句子都是由单词组成的，而单词又由字符组成。每一个对象都是可打印的，在它们之前或之后都可以打印一些东西，比如句子总是以句号结束，单词总是在它之前有空格。 这里我们有基类LetterComposite和不同的可打印类型Letter， Word和Sentence</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LetterComposite</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;LetterComposite&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(LetterComposite letter)</span> &#123;<br>        children.add(letter);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> children.size();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThisBefore</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThisAfter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        printThisBefore();<br>        children.forEach(LetterComposite::print);<br>        printThisAfter();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Letter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LetterComposite</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> character;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Letter</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-built_in">this</span>.character = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThisBefore</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(character);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Word</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LetterComposite</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Word</span><span class="hljs-params">(List&lt;Letter&gt; letters)</span> &#123;<br>        letters.forEach(<span class="hljs-built_in">this</span>::add);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Word</span><span class="hljs-params">(<span class="hljs-type">char</span>... letters)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> letter : letters) &#123;<br>            <span class="hljs-built_in">this</span>.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Letter</span>(letter));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThisBefore</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sentence</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LetterComposite</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sentence</span><span class="hljs-params">(List&lt;Word&gt; words)</span> &#123;<br>        words.forEach(<span class="hljs-built_in">this</span>::add);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThisAfter</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Messenger</span> &#123;<br><br>    LetterComposite <span class="hljs-title function_">messageFromOrcs</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">words</span> <span class="hljs-operator">=</span> List.of(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;a&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;a&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>)<br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sentence</span>(words);<br><br>    &#125;<br><br>    LetterComposite <span class="hljs-title function_">messageFromElves</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">words</span> <span class="hljs-operator">=</span> List.of(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Word</span>(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>)<br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sentence</span>(words);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">messenger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Messenger</span>();<br><br>    LOGGER.info(<span class="hljs-string">&quot;Message from the orcs: &quot;</span>);<br>    messenger.messageFromOrcs().print();<br><br>    LOGGER.info(<span class="hljs-string">&quot;Message from the elves: &quot;</span>);<br>    messenger.messageFromElves().print();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">20:43:54.801 [main] INFO com.iluwatar.composite.App -- Message from the orcs: <br> Where there is a whip there is a way.<br>20:43:54.803 [main] INFO com.iluwatar.composite.App -- Message from the elves: <br> Much wind pours from your mouth.<br></code></pre></td></tr></table></figure><h2 id="组合模式的两种实现：透明模式和安全模式"><a href="#组合模式的两种实现：透明模式和安全模式" class="headerlink" title="组合模式的两种实现：透明模式和安全模式"></a>组合模式的两种实现：透明模式和安全模式</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>会使设计过于一般化。限制组合的某些组件可能比较困难</li><li>限制组合中组件的类型变得更加困难<br>组合模式的主要优点–统一对待单个物体和复合物体–也是它的主要弱点。通过将设计推广到处理范围广泛的场景，模式牺牲了特定性，使其更难强制执行约束，并导致潜在的误用或意外行为。这种权衡是模式本身固有的，在决定是否在给定上下文中使用它时必须仔细考虑</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="/design-pattern/memento.html"/>
    <url>/design-pattern/memento.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>备忘录（Memento）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>保留封装边界</li><li>创建者不需要直接管理版本历史或撤销功能，简化了创建者</li></ul><h2 id="什么时候使用备忘录模式"><a href="#什么时候使用备忘录模式" class="headerlink" title="什么时候使用备忘录模式"></a>什么时候使用备忘录模式</h2><ul><li>需要在Java中捕获对象的状态，然后在不暴露其内部结构的情况下恢复它这对于维护封装和简化对象状态的管理至关重要</li><li>直接获取状态的接口将暴露实现细节并破坏对象的封装</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>星体随着时间发生变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 星体类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StarType</span> &#123;<br>  SUN(<span class="hljs-string">&quot;sun&quot;</span>),<br>  RED_GIANT(<span class="hljs-string">&quot;red giant&quot;</span>),<br>  WHITE_DWARF(<span class="hljs-string">&quot;white dwarf&quot;</span>),<br>  SUPERNOVA(<span class="hljs-string">&quot;supernova&quot;</span>),<br>  DEAD(<span class="hljs-string">&quot;dead star&quot;</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 星体备忘录和星体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StarMemento</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StarType type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ageYears;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> massTons;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Star</span><span class="hljs-params">(StarType startType, <span class="hljs-type">int</span> startAge, <span class="hljs-type">int</span> startMass)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = startType;<br>        <span class="hljs-built_in">this</span>.ageYears = startAge;<br>        <span class="hljs-built_in">this</span>.massTons = startMass;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timePasses</span><span class="hljs-params">()</span> &#123;<br>        ageYears *= <span class="hljs-number">2</span>;<br>        massTons *= <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> RED_GIANT -&gt; type = StarType.WHITE_DWARF;<br>            <span class="hljs-keyword">case</span> SUN -&gt; type = StarType.RED_GIANT;<br>            <span class="hljs-keyword">case</span> SUPERNOVA -&gt; type = StarType.DEAD;<br>            <span class="hljs-keyword">case</span> WHITE_DWARF -&gt; type = StarType.SUPERNOVA;<br>            <span class="hljs-keyword">case</span> DEAD -&gt; &#123;<br>                ageYears *= <span class="hljs-number">2</span>;<br>                massTons = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    StarMemento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StarMementoInternal</span>();<br>        state.setAgeYears(ageYears);<br>        state.setMassTons(massTons);<br>        state.setType(type);<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemento</span><span class="hljs-params">(StarMemento memento)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> (StarMementoInternal) memento;<br>        <span class="hljs-built_in">this</span>.type = state.getType();<br>        <span class="hljs-built_in">this</span>.ageYears = state.getAgeYears();<br>        <span class="hljs-built_in">this</span>.massTons = state.getMassTons();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%s age: %d years mass: %d tons&quot;</span>, type.toString(), ageYears, massTons);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarMementoInternal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StarMemento</span> &#123;<br><br>        <span class="hljs-keyword">private</span> StarType type;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ageYears;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> massTons;<br><br>        <span class="hljs-comment">// setters and getters -&gt;</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">states</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;StarMemento&gt;();<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(StarType.SUN, <span class="hljs-number">10000000</span>, <span class="hljs-number">500000</span>);<br>    LOGGER.info(star.toString());<br>    states.add(star.getMemento());<br>    star.timePasses();<br>    LOGGER.info(star.toString());<br>    states.add(star.getMemento());<br>    star.timePasses();<br>    LOGGER.info(star.toString());<br>    states.add(star.getMemento());<br>    star.timePasses();<br>    LOGGER.info(star.toString());<br>    states.add(star.getMemento());<br>    star.timePasses();<br>    LOGGER.info(star.toString());<br>    <span class="hljs-keyword">while</span> (!states.isEmpty()) &#123;<br>        star.setMemento(states.pop());<br>        LOGGER.info(star.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">14:09:15.878 [main] INFO com.iluwatar.memento.App -- sun age: 10000000 years mass: 500000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- red giant age: 20000000 years mass: 4000000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- white dwarf age: 40000000 years mass: 32000000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- supernova age: 80000000 years mass: 256000000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- dead star age: 160000000 years mass: 2048000000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- supernova age: 80000000 years mass: 256000000 tons<br>14:09:15.880 [main] INFO com.iluwatar.memento.App -- white dwarf age: 40000000 years mass: 32000000 tons<br>14:09:15.881 [main] INFO com.iluwatar.memento.App -- red giant age: 20000000 years mass: 4000000 tons<br>14:09:15.881 [main] INFO com.iluwatar.memento.App -- sun age: 10000000 years mass: 500000 tons<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>如果保存了大量的状态，可能会消耗过多内存</li><li>必须小心管理备忘录的生命周期，以避免内存泄漏</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记一个Windows下Redis的坑</title>
    <link href="/problem/redis-1.html"/>
    <url>/problem/redis-1.html</url>
    
    <content type="html"><![CDATA[<h2 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h2><p>从GitHub下载好<a href="https://github.com/redis-windows/redis-windows/releases">windows平台的Redis压缩包</a>：</p><p><img src="/images/redis-install.png" alt="Redis安装"></p><p>此时就出现问题了,一定要下载<code>with-service</code>的包，不然无法安装为windows服务：</p><p><img src="/images/redis-fatal.png" alt="命令行报错"></p><p>你会发现<code>service-insatll</code>这里总是报错，如果下了不带<code>with-service</code>的包，因为不支持Windows service，无法安装为Windows服务，这问题折磨了一个小时:expressionless:</p><p>关于Cygwin和MSYS2的选择，MSYS2比Cygwin更现代、更轻量，详见<a href="https://www.zhihu.com/question/22137175/answer/90908473">这里</a></p><h2 id="安装为Windows服务并自动启动"><a href="#安装为Windows服务并自动启动" class="headerlink" title="安装为Windows服务并自动启动"></a>安装为Windows服务并自动启动</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">// 安装服务<br>redis-server --service-install redis.conf --loglevel verbose<br></code></pre></td></tr></table></figure><p>你以为你能运行成功，错了！还是报一样的错误…:satisfied:明明网上搜的方法就是这样，不知道什么原因，以后再补上吧。<br>下载的包里面本来就有安装和卸载服务的bat文件，直接运行第一个安装服务就好了<br><img src="/images/redis-zip.png" alt="redis目录"><br><img src="/images/install-redis-service.png" alt="安装redis服务"><br>win搜索栏搜索service进入，可以看到上面安装的redis服务，并且是自启的<br><img src="/images/redis-service.png" alt="redis服务"></p><h2 id="其他Redis命令（这些命令似乎都作废了）"><a href="#其他Redis命令（这些命令似乎都作废了）" class="headerlink" title="其他Redis命令（这些命令似乎都作废了）"></a>其他Redis命令（这些命令似乎都作废了）</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmd">// 安装服务<br>redis-server --service-install redis.conf --loglevel verbose<br>// 启动服务<br>redis-server --service-<span class="hljs-built_in">start</span><br>// 停止服务<br>redis-server --service-stop<br>// 卸载服务<br>redis-server --service-uninstall<br>// 重命名服务<br>redis-server --service-name name<br></code></pre></td></tr></table></figure><h2 id="12-29日更新"><a href="#12-29日更新" class="headerlink" title="12.29日更新"></a>12.29日更新</h2><h3 id="上述问题出现的原因"><a href="#上述问题出现的原因" class="headerlink" title="上述问题出现的原因"></a>上述问题出现的原因</h3><p>Redis的官方版本并不支持Windows平台。Redis是为类Unix系统（如Linux和macOS）设计的，官方团队没有提供正式的Windows版本。因此，所有 Windows 上的 Redis 都是由社区贡献的移植版本<br><a href="https://github.com/redis-windows/redis-windows/releases">这个版本</a>可以一键安装为Windows服务<br><a href="https://www.zhihu.com/question/424272611/answer/2611312760">详见</a></p><h3 id="另一个兼容Windows的Redis版本：Memurai"><a href="#另一个兼容Windows的Redis版本：Memurai" class="headerlink" title="另一个兼容Windows的Redis版本：Memurai"></a>另一个兼容Windows的Redis版本：Memurai</h3><p><a href="https://www.memurai.com/">Memurai</a>是Windows平台下Redis的兼容实现。它旨在提供企业级Windows环境所需的可靠性和性能。与Redis一样，Memurai使用基于内存的数据结构来大幅提升性能，并且Memurai支持了所有Redis功能，下载后直接安装就可以注册为Windows服务，不过命令和Redis有点不同，需使用memurai-cli，memurai.conf等</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="/design-pattern/adapter.html"/>
    <url>/design-pattern/adapter.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>适配器模式（Adapter），将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p><h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>可以覆盖自适应对象的行为，因为它使用继承 </li><li>比对象适配器稍快，因为方法调用在编译时解析（静态绑定）</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>由于继承而与适应类紧密耦合</li><li>不能适应多个自适应对象（因为大多数语言不支持多重继承）</li><li>不太灵活，因为它依赖于编译时关系<br>类适配器通过绑定到特定的Adaptee类来使Adaptee适应Target，这意味着它不能适应类及其所有子类。这种类型的适配器允许适配器覆盖Adaptee的一些行为，因为适配器是Adaptee的子类。 此外，它只引入一个对象，而不需要额外的指针间接地使用Adaptee。</li></ul><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>更灵活，因为它不依赖于继承</li><li>可以通过包装不同的对象来使用多个自适应器</li><li>与被适应者松散耦合，使其在将来更容易修改或扩展</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>由于额外的间接级别（方法调用在运行时解析），动态绑定，比类适配器稍微慢一些<br>对象适配器允许单个适配器与多个Adaptee一起工作，包括Adaptee及其所有子类。这种类型的适配器可以同时向所有适配器添加功能。然而，它使得重写Adaptee的变得更加困难，因为它需要继承Adaptee的子类，并且让Adapter引用这个子类而不是Adaptee本身</li></ul><h2 id="什么时候使用适配器模式"><a href="#什么时候使用适配器模式" class="headerlink" title="什么时候使用适配器模式"></a>什么时候使用适配器模式</h2><ul><li>想要复用现有的类，但它的接口与你需要的不匹配</li><li>创建一个可重用的类，它可以与不相关或不可预见的类（即不一定具有兼容接口的类）协作</li><li>需要使用几个现有的子类，但是通过将每个子类化来调整它们的接口是不切实际的。对象适配器可以调整其父类的接口</li><li>大多数使用第三方库的应用程序都使用适配器作为应用程序和第三方库之间的中间层，以将应用程序与库分离。如果必须使用另一个库，则只需要新库的适配器，而不必更改应用程序代码</li></ul><h2 id="适配器代码示例"><a href="#适配器代码示例" class="headerlink" title="适配器代码示例"></a>适配器代码示例</h2><h3 id="类适配器（多在支持多重继承的语言里使用，例如C-）"><a href="#类适配器（多在支持多重继承的语言里使用，例如C-）" class="headerlink" title="类适配器（多在支持多重继承的语言里使用，例如C++）"></a>类适配器（多在支持多重继承的语言里使用，例如C++）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Target interface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// Adaptee (existing class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">specificRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Specific request&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Class Adapter</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Adapting the interface</span><br>        specificRequest();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Client</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Target</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassAdapter</span>();<br>        target.request();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="对象适配器-1"><a href="#对象适配器-1" class="headerlink" title="对象适配器"></a>对象适配器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Target interface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// Adaptee (existing class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">specificRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Specific request&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Object Adapter</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">private</span> Adaptee adaptee;<br><br>    <span class="hljs-comment">// Constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectAdapter</span><span class="hljs-params">(Adaptee adaptee)</span> &#123;<br>        <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Adapting the interface</span><br>        adaptee.specificRequest();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Client</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adaptee</span> <span class="hljs-variable">adaptee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adaptee</span>();<br>        <span class="hljs-type">Target</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectAdapter</span>(adaptee);<br>        target.request();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>状态模式之可重用对象</title>
    <link href="/design-pattern/reusable-state-objects.html"/>
    <url>/design-pattern/reusable-state-objects.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是可重用状态对象"><a href="#什么是可重用状态对象" class="headerlink" title="什么是可重用状态对象"></a>什么是可重用状态对象</h2><p>可重用状态对象是指一个状态对象可以被多个上下文（Context）实例共享，而不是为每个上下文单独创建新的状态对象。它的主要特点包括：</p><ul><li>状态对象是无状态的（stateless）：状态对象本身不会存储特定上下文的数据，这样可以在多个上下文之间安全共享</li><li>状态的行为被封装：状态对象只负责定义与其相关的行为，而上下文负责存储自身的数据</li><li>通过共享减少资源消耗：避免为每个上下文重复创建相同的状态对象<br>这种设计在需要频繁切换状态的场景中非常有效，例如工作流管理、任务状态管理、游戏开发等</li></ul><h2 id="为什么需要可重用状态对象"><a href="#为什么需要可重用状态对象" class="headerlink" title="为什么需要可重用状态对象"></a>为什么需要可重用状态对象</h2><ul><li>减少内存开销：如果每个上下文都创建自己的状态对象，那么在大量上下文实例存在时，会导致内存占用过高。通过共享状态对象，可以显著减少内存使用</li><li>提高性能：对象的创建和销毁是有成本的，特别是在状态频繁切换的情况下。共享状态对象可以避免重复的对象创建</li><li>简化管理：状态对象的行为集中管理，易于维护和扩展</li></ul><h2 id="如何在Java中实现可重用状态对象"><a href="#如何在Java中实现可重用状态对象" class="headerlink" title="如何在Java中实现可重用状态对象"></a>如何在Java中实现可重用状态对象</h2><p>可以通过 状态模式（State Pattern） 和 单例模式（Singleton Pattern）结合来实现状态对象的共享</p><h3 id="示例：订单状态共享"><a href="#示例：订单状态共享" class="headerlink" title="示例：订单状态共享"></a>示例：订单状态共享</h3><p>以下是一个简单的示例，展示如何在多个订单上下文中共享状态对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义状态接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderState</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(OrderContext context)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：待支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PendingPaymentState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderState</span> &#123;<br>    <span class="hljs-comment">// 使用单例模式实现状态对象共享</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">PendingPaymentState</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PendingPaymentState</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">PendingPaymentState</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PendingPaymentState <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(OrderContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;处理待支付状态。&quot;</span>);<br>        context.setState(PaidState.getInstance()); <span class="hljs-comment">// 切换到已支付状态</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：已支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaidState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderState</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">PaidState</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaidState</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">PaidState</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PaidState <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(OrderContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;处理已支付状态。&quot;</span>);<br>        context.setState(ShippedState.getInstance()); <span class="hljs-comment">// 切换到已发货状态</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：已发货</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShippedState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderState</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ShippedState</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShippedState</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ShippedState</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ShippedState <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(OrderContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;处理已发货状态。&quot;</span>);<br>        <span class="hljs-comment">// 最终状态，无需切换</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderContext</span> &#123;<br>    <span class="hljs-keyword">private</span> OrderState state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderContext</span><span class="hljs-params">(OrderState state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(OrderState state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span> &#123;<br>        state.handle(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建订单上下文，并初始化为待支付状态</span><br>        <span class="hljs-type">OrderContext</span> <span class="hljs-variable">order1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderContext</span>(PendingPaymentState.getInstance());<br>        <span class="hljs-type">OrderContext</span> <span class="hljs-variable">order2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderContext</span>(PendingPaymentState.getInstance());<br><br>        <span class="hljs-comment">// 处理订单1</span><br>        order1.handle(); <span class="hljs-comment">// 输出：处理待支付状态。</span><br>        order1.handle(); <span class="hljs-comment">// 输出：处理已支付状态。</span><br><br>        <span class="hljs-comment">// 处理订单2</span><br>        order2.handle(); <span class="hljs-comment">// 输出：处理待支付状态。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例中的关键点解析"><a href="#示例中的关键点解析" class="headerlink" title="示例中的关键点解析"></a>示例中的关键点解析</h3><ul><li>状态对象的共享：<br>每个具体状态类（如 PendingPaymentState、PaidState）通过单例模式实现<br>这些状态对象是全局唯一的，可以在多个上下文实例中共享</li><li>上下文存储自身数据：<br>上下文类 OrderContext 持有当前状态的引用，并存储与该上下文相关的数据。状态对象本身不存储上下文数据，因此可以安全共享</li><li>状态切换显式化：<br>状态切换通过调用 context.setState() 方法完成，切换逻辑被显式地定义在状态对象中</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>内存效率高：状态对象是共享的，无需为每个上下文创建新的实例</li><li>易于维护：状态的行为集中在具体状态类中，逻辑清晰</li><li>可扩展性强：添加新状态时，只需增加新的状态类，不影响现有代码</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>工作流系统：例如订单处理、审批流程等</li><li>游戏开发：例如角色的行为状态（行走、攻击、防御）</li><li>任务管理系统：例如任务的状态（待处理、处理中、已完成）</li><li>资源管理：例如共享连接池中的连接状态（空闲、使用中）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过将状态对象设计为可重用的单例对象，可以在 Java 中的各种上下文之间有效共享这些状态对象。这种设计不仅提高了内存和性能效率，还使状态管理更加清晰和易于维护。这种模式非常适合于需要频繁切换状态的场景，是状态模式的一种优化实现</p>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
      <category>state</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="/design-pattern/state.html"/>
    <url>/design-pattern/state.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>状态模式（State），当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>本地化特定状态的行为，并为不同的状态划分行为<br>消除庞大的条件分支语句，通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖</p><blockquote><p>本地化在这里的意思是将与特定状态相关的行为封装起来，独立管理，从而实现清晰的状态划分和行为隔离，通过定义新的子类可以很容易地增加新的状态和转换  </p></blockquote></li><li><p>使状态转换显式化，清楚地定义状态及其之间的关系：每个状态的可能转换方向和条件是明确的，而不是隐藏在代码的逻辑中</p></li><li><p><a href="https://s1mplecode.com/design-pattern/reusable-state-objects">可重用状态对象</a>可以在Java中的各种上下文之间有效地共享，从而增强内存管理和性能</p></li></ul><h2 id="什么时候使用状态模式"><a href="#什么时候使用状态模式" class="headerlink" title="什么时候使用状态模式"></a>什么时候使用状态模式</h2><ul><li>对象的行为取决于它的状态，并且它必须在运行时根据状态改变其行为</li><li>操作具有依赖于对象状态的大型的、有多个部分的条件语句，状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>见<a href="https://s1mplecode.com/design-pattern/reusable-state-objects#%E7%A4%BA%E4%BE%8B%EF%BC%9A%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81%E5%85%B1%E4%BA%AB">可重用状态对象</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可能导致大量的状态类</li><li>上下文类会因状态转换逻辑而变得复杂</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <link href="/design-pattern/abstract-factory.html"/>
    <url>/design-pattern/abstract-factory.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>抽象工厂模式（Abstract Factory），提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>灵活性: 无需修改代码即可在产品系列之间轻松切换</li><li>解耦: 客户端代码只与抽象接口交互，提高了可移植性和可维护性</li><li>可重用性: 抽象工厂和产品促进了跨项目的组件重用</li><li>可维护性: 对单个产品系列的更改是本地化的，简化了更新</li></ul><h2 id="什么时候使用抽象工厂模式"><a href="#什么时候使用抽象工厂模式" class="headerlink" title="什么时候使用抽象工厂模式"></a>什么时候使用抽象工厂模式</h2><ul><li>系统应该独立于其产品的创建、组合和表示方式</li><li>需要使用多个产品系列中的一个来配置系统</li><li>一系列相关的产品对象必须一起使用，以保持一致性</li><li>希望提供的产品的类库，只公开它们的接口，而不是它们的实现</li><li>依赖项的生存期比使用者的生存期短</li><li>需要使用运行时的值或参数构造依赖项</li><li>需要在运行时从一系列产品中选择使用哪个产品</li><li>添加新产品或系列不应要求对现有代码进行更改</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>创建精灵王国和半兽人王国</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Castle</span> &#123;<br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">King</span> &#123;<br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Army</span> &#123;<br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// Elven implementations -&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElfCastle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Castle</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is the elven castle!&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DESCRIPTION;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElfKing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">King</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is the elven king!&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DESCRIPTION;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElfArmy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Army</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is the elven Army!&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DESCRIPTION;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Orcish implementations similarly -&gt; ...</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">KingdomFactory</span> &#123;<br>    Castle <span class="hljs-title function_">createCastle</span><span class="hljs-params">()</span>;<br><br>    King <span class="hljs-title function_">createKing</span><span class="hljs-params">()</span>;<br><br>    Army <span class="hljs-title function_">createArmy</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElfKingdomFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KingdomFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Castle <span class="hljs-title function_">createCastle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfCastle</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> King <span class="hljs-title function_">createKing</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfKing</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Army <span class="hljs-title function_">createArmy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfArmy</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Orcish implementations similarly -&gt; ...</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryMaker</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">KingdomType</span> &#123;<br>        ELF, ORC<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KingdomFactory <span class="hljs-title function_">makeFactory</span><span class="hljs-params">(KingdomType type)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> ELF -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfKingdomFactory</span>();<br>            <span class="hljs-keyword">case</span> ORC -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrcKingdomFactory</span>();<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>复杂性: 定义抽象接口和具体工厂会增加初始开销</li><li>间接性: 客户端代码通过工厂间接地与产品交互，这可能会降低透明度</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="/design-pattern/observer.html"/>
    <url>/design-pattern/observer.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>观察者模式（Observer）定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>促进了松耦合，允许主题及其观察者在没有紧密依赖的情况下进行交互，从而简化了维护和可伸缩性</li><li>允许动态订阅和取消订阅观察者</li></ul><h2 id="什么时候使用观察者模式"><a href="#什么时候使用观察者模式" class="headerlink" title="什么时候使用观察者模式"></a>什么时候使用观察者模式</h2><ul><li>当一个抽象有两个方面时，其中一个依赖于另一个。将这些方面封装在单独的对象中，可以独立地更改和重用它们</li><li>当对一个对象的更改需要更改其他对象时，而且通常你不知道需要更改多少对象</li><li>一个对象应该能够通知其他对象，而不需要假设这些对象是谁。换句话说，你不希望这些对象紧密耦合</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>霍比特人和半兽人(观察者)对天气(主题)的反应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WeatherObserver</span> &#123;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(WeatherType currentWeather)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orcs</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WeatherObserver</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(WeatherType currentWeather)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;The orcs are facing &quot;</span> + currentWeather.getDescription() + <span class="hljs-string">&quot; weather now&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hobbits</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WeatherObserver</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(WeatherType currentWeather)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (currentWeather) &#123;<br>      LOGGER.info(<span class="hljs-string">&quot;The hobbits are facing &quot;</span> + currentWeather.getDescription() + <span class="hljs-string">&quot; weather now&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> &#123;<br><br>  <span class="hljs-keyword">private</span> WeatherType currentWeather;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;WeatherObserver&gt; observers;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weather</span><span class="hljs-params">()</span> &#123;<br>    observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    currentWeather = WeatherType.SUNNY;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addObserver</span><span class="hljs-params">(WeatherObserver obs)</span> &#123;<br>    observers.add(obs);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(WeatherObserver obs)</span> &#123;<br>    observers.remove(obs);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Makes time pass for weather.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timePasses</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">enumValues</span> <span class="hljs-operator">=</span> WeatherType.values();<br>    currentWeather = enumValues[(currentWeather.ordinal() + <span class="hljs-number">1</span>) % enumValues.length];<br>    LOGGER.info(<span class="hljs-string">&quot;The weather changed to &#123;&#125;.&quot;</span>, currentWeather);<br>    notifyObservers();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> obs : observers) &#123;<br>      obs.update(currentWeather);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>  <span class="hljs-type">var</span> <span class="hljs-variable">weather</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weather</span>();<br>  weather.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Orcs</span>());<br>  weather.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hobbits</span>());<br><br>  weather.timePasses();<br>  weather.timePasses();<br>  weather.timePasses();<br>  weather.timePasses();<br><br>  <span class="hljs-comment">// Generic observer inspired by Java Generics and Collections by Naftalin &amp; Wadler</span><br>  LOGGER.info(<span class="hljs-string">&quot;--Running generic version--&quot;</span>);<br>  <span class="hljs-type">var</span> <span class="hljs-variable">genericWeather</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenWeather</span>();<br>  genericWeather.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenOrcs</span>());<br>  genericWeather.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenHobbits</span>());<br><br>  genericWeather.timePasses();<br>  genericWeather.timePasses();<br>  genericWeather.timePasses();<br>  genericWeather.timePasses();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.310</span> [main] INFO com.iluwatar.observer.Weather -- The weather changed to rainy.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Orcs -- The orcs are facing Rainy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Hobbits -- The hobbits are facing Rainy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Weather -- The weather changed to windy.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Orcs -- The orcs are facing Windy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Hobbits -- The hobbits are facing Windy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Weather -- The weather changed to cold.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Orcs -- The orcs are facing Cold weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Hobbits -- The hobbits are facing Cold weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Weather -- The weather changed to sunny.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Orcs -- The orcs are facing Sunny weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.Hobbits -- The hobbits are facing Sunny weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.312</span> [main] INFO com.iluwatar.observer.App -- --Running generic version--<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenWeather -- The weather changed to rainy.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenOrcs -- The orcs are facing Rainy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenHobbits -- The hobbits are facing Rainy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenWeather -- The weather changed to windy.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenOrcs -- The orcs are facing Windy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenHobbits -- The hobbits are facing Windy weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenWeather -- The weather changed to cold.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenOrcs -- The orcs are facing Cold weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenHobbits -- The hobbits are facing Cold weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenWeather -- The weather changed to sunny.<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenOrcs -- The orcs are facing Sunny weather now<br><span class="hljs-number">21</span>:<span class="hljs-number">28</span>:<span class="hljs-number">08.313</span> [main] INFO com.iluwatar.observer.generic.GenHobbits -- The hobbits are facing Sunny weather now<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>如果没有正确注销观察者，可能导致内存泄漏</li><li>未指定通知的顺序，可能导致潜在的意外行为</li><li>大量观察者可能导致性能问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="/design-pattern/builder.html"/>
    <url>/design-pattern/builder.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>建造者模式（Builder），将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>与其他创作模式相比，对构建过程有更多的控制</li><li>支持逐步构造对象、推迟构造步骤或递归地运行步骤</li><li>可以构造需要子对象的复杂组合的对象，最终产品与对象的组成的部分以及对象的组装过程分离开来</li><li>单一职责原则，可以将复杂的构造代码与产品的业务逻辑隔分离开来</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>创建英雄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Profession profession;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HairType hairType;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HairColor hairColor;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Armor armor;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Weapon weapon;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(Builder builder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.profession = builder.profession;<br>        <span class="hljs-built_in">this</span>.name = builder.name;<br>        <span class="hljs-built_in">this</span>.hairColor = builder.hairColor;<br>        <span class="hljs-built_in">this</span>.hairType = builder.hairType;<br>        <span class="hljs-built_in">this</span>.weapon = builder.weapon;<br>        <span class="hljs-built_in">this</span>.armor = builder.armor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Profession profession;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> HairType hairType;<br>    <span class="hljs-keyword">private</span> HairColor hairColor;<br>    <span class="hljs-keyword">private</span> Armor armor;<br>    <span class="hljs-keyword">private</span> Weapon weapon;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Profession profession, String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (profession == <span class="hljs-literal">null</span> || name == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;profession and name can not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.profession = profession;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">withHairType</span><span class="hljs-params">(HairType hairType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hairType = hairType;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">withHairColor</span><span class="hljs-params">(HairColor hairColor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hairColor = hairColor;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">withArmor</span><span class="hljs-params">(Armor armor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.armor = armor;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">withWeapon</span><span class="hljs-params">(Weapon weapon)</span> &#123;<br>        <span class="hljs-built_in">this</span>.weapon = weapon;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Hero <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">mage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>.Builder(Profession.MAGE, <span class="hljs-string">&quot;Riobard&quot;</span>)<br>            .withHairColor(HairColor.BLACK)<br>            .withWeapon(Weapon.DAGGER)<br>            .build();<br>    LOGGER.info(mage.toString());<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">warrior</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>.Builder(Profession.WARRIOR, <span class="hljs-string">&quot;Amberjill&quot;</span>)<br>            .withHairColor(HairColor.BLOND)<br>            .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)<br>            .build();<br>    LOGGER.info(warrior.toString());<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">thief</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>.Builder(Profession.THIEF, <span class="hljs-string">&quot;Desmond&quot;</span>)<br>            .withHairType(HairType.BALD)<br>            .withWeapon(Weapon.BOW)<br>            .build();<br>    LOGGER.info(thief.toString());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">16</span>:<span class="hljs-number">28</span>:<span class="hljs-number">06.058</span> [main] INFO com.iluwatar.builder.App -- This is a mage named Riobard with black hair and wielding a dagger.<br><span class="hljs-number">16</span>:<span class="hljs-number">28</span>:<span class="hljs-number">06.060</span> [main] INFO com.iluwatar.builder.App -- This is a warrior named Amberjill with blond <span class="hljs-type">long</span> curly hair wearing chain mail and wielding a sword.<br><span class="hljs-number">16</span>:<span class="hljs-number">28</span>:<span class="hljs-number">06.060</span> [main] INFO com.iluwatar.builder.App -- This is a thief named Desmond with bald head and wielding a bow.<br></code></pre></td></tr></table></figure><h2 id="什么时候使用建造者模式"><a href="#什么时候使用建造者模式" class="headerlink" title="什么时候使用建造者模式"></a>什么时候使用建造者模式</h2><ul><li><p>非常适合需要创建复杂对象的Java应用程序</p></li><li><p>创建复杂对象的算法应该独立于组成对象的各个部分及其组装方式</p></li><li><p>构造过程必须允许所构造的对象具有不同的表示形式</p></li><li><p>当一个产品需要大量的步骤来创建，并且这些步骤需要按特定的顺序执行时，它特别有用用</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>由于需要创建多个新类，因此代码的总体复杂性可能会增加</li><li>由于创建多个构建器对象，可能会增加内存使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之外观模式</title>
    <link href="/design-pattern/facade.html"/>
    <url>/design-pattern/facade.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>外观模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>将客户端与子系统组件隔离开来，使其更易于使用并减少依赖关系</li><li>促进子系统与其客户端之间的弱耦合</li><li>简化复杂系统的API</li></ul><h2 id="何时使用外观模式"><a href="#何时使用外观模式" class="headerlink" title="何时使用外观模式"></a>何时使用外观模式</h2><ol><li>在设计初期阶段，应该要有意识的将不同的两个层分离。比如经典的三层架构，就需要考虑在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间建立外观Facade，这样可以为复杂的子系统提供一个简单的接口，使得耦合大大降低</li><li>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，大多数的模式使用时也都会产生很多很小的类，这本是好事，但也给外部调用它们的用户程序带来了使用上的困难，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖</li><li>在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，但因为它包含非常重要的功能，新的需求开发必须要依赖于它。此时用外观模式Facade也是非常合适的。你可以为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作</li></ol><p><img src="/images/facade.png" alt="Facade接口"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果没有正确实现，facade可能成为与应用程序的所有类耦合的对象（上帝对象）</p><h3 id="什么是-God-Object（上帝对象）"><a href="#什么是-God-Object（上帝对象）" class="headerlink" title="什么是 God Object（上帝对象）"></a>什么是 God Object（上帝对象）</h3><ul><li>上帝对象是一个过于庞大、知道太多、做太多事情的对象</li><li>它往往与系统中的大多数类都有耦合关系</li><li>违反了单一职责原则，难以维护和测试</li></ul><h4 id="Facade-变成-God-Object-的原因"><a href="#Facade-变成-God-Object-的原因" class="headerlink" title="Facade 变成 God Object 的原因"></a>Facade 变成 God Object 的原因</h4><ol><li>职责过度扩张</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 糟糕的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BadFacade</span> &#123;<br>    <span class="hljs-keyword">private</span> ServiceA serviceA;<br>    <span class="hljs-keyword">private</span> ServiceB serviceB;<br>    <span class="hljs-keyword">private</span> ServiceC serviceC;<br>    <span class="hljs-comment">// ... 更多服务</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEverything</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 处理所有业务逻辑</span><br>        serviceA.doSomething();<br>        serviceB.process();<br>        serviceC.handle();<br>        <span class="hljs-comment">// ... 大量业务逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.过度集中的控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodFacade</span> &#123;<br>    <span class="hljs-keyword">private</span> SubsystemA subsystemA;<br>    <span class="hljs-keyword">private</span> SubsystemB subsystemB;<br><br>    <span class="hljs-comment">// 只提供必要的高层接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        subsystemA.operationA();<br>        subsystemB.operationB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何避免-Facade-变成-God-Object"><a href="#如何避免-Facade-变成-God-Object" class="headerlink" title="如何避免 Facade 变成 God Object"></a>如何避免 Facade 变成 God Object</h4><ol><li>保持单一职责</li></ol><ul><li>Facade 应该只负责协调和委派</li><li>不要在 Facade 中实现具体的业务逻辑</li></ul><ol start="2"><li>合理分层</li></ol><ul><li>可以使用多个 Facade</li><li>每个 Facade 负责一个特定的子系统</li></ul><ol start="3"><li>接口隔离</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分离接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderFacade</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">processOrder</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentFacade</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPayment</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>限制知识范围</li></ol><ul><li>Facade 不需要知道所有细节</li><li>只暴露必要的功能</li></ul><h4 id="好的实践示例"><a href="#好的实践示例" class="headerlink" title="好的实践示例"></a>好的实践示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分离关注点的 Facade 实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProcessingFacade</span> &#123;<br>    <span class="hljs-keyword">private</span> OrderValidator validator;<br>    <span class="hljs-keyword">private</span> OrderProcessor processor;<br>    <span class="hljs-keyword">private</span> NotificationService notifier;<br><br>    <span class="hljs-keyword">public</span> OrderResult <span class="hljs-title function_">processOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-comment">// 只协调核心流程，不包含具体实现</span><br>        <span class="hljs-keyword">if</span> (validator.validate(order)) &#123;<br>            <span class="hljs-type">OrderResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> processor.process(order);<br>            notifier.notify(result);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-keyword">return</span> OrderResult.failed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>Facade 模式本身是好的，问题在于实现方式</li><li>避免让 Facade 承担过多责任</li><li>保持 Facade 的简单性和专注性</li><li>如果发现 Facade 变得过于复杂，考虑拆分成多个专门的 Facade</li></ul><blockquote><p>记住：好的 Facade 应该像一个优秀的管理者，知道如何委派工作，而不是事事亲力亲为</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之迪米特法则</title>
    <link href="/design-pattern/law-of-demeter.html"/>
    <url>/design-pattern/law-of-demeter.html</url>
    
    <content type="html"><![CDATA[<h2 id="一-什么是迪米特法则"><a href="#一-什么是迪米特法则" class="headerlink" title="一. 什么是迪米特法则"></a>一. 什么是迪米特法则</h2><p><strong>迪米特法则(Law of Demeter)又叫做最少知识原则，也就是说，一个对象应当对其他对象尽可能少的了解。不和陌生人说话。英文简写为: LoD。</strong></p><p><strong>迪米特法则的目的在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</strong></p><p><strong>迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度。</strong></p><h2 id="二-为什么要遵守迪米特法则"><a href="#二-为什么要遵守迪米特法则" class="headerlink" title="二. 为什么要遵守迪米特法则"></a>二. 为什么要遵守迪米特法则</h2><p><strong>在面向对象编程中有一些众所周知的抽象概念，比如封装、内聚和耦合，理论上可以用来生成清晰的设计和良好的代码。虽然这些都是非常重要的概念，但它们不够实用，不能直接用于开发环境，这些概念是比较主观的，非常依赖于使用人的经验和知识。对于其他概念，如单一责任原则、开闭原则等，情况也是一样的。迪米特法则的独特之处在于它简洁而准确的定义，它允许在编写代码时直接应用，几乎自动地应用了适当的封装、低内聚和松耦合。</strong></p><h2 id="三-迪米特法则的广狭义"><a href="#三-迪米特法则的广狭义" class="headerlink" title="三. 迪米特法则的广狭义"></a>三. 迪米特法则的广狭义</h2><h3 id="1-狭义的迪米特法则"><a href="#1-狭义的迪米特法则" class="headerlink" title="1. 狭义的迪米特法则"></a>1. 狭义的迪米特法则</h3><p><strong>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</strong></p><p><strong>朋友圈的确定“朋友”条件：</strong></p><p>1）当前对象本身（this）</p><p>2）以参数形式传入到当前对象方法中的对象. 方法入参是一个对象, 这个对象和当前类是朋友</p><p>3）当前对象的实例变量直接引用的对象 定一个一个类, 里面的属性引用了其他对象, 那么这个对象的实例和当前实例是朋友</p><p>4）当前对象的实例变量如果是一个聚集，那么聚集中的元素也都是朋友 如果属性是一个对象, 那么属性和对象里的元素都是朋友</p><p>5）当前对象所创建的对象</p><p><strong>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”；否则就是“陌生人”。</strong></p><p><strong>出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</strong></p><p><strong>狭义的迪米特法则的缺点：</strong></p><p><strong>在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。 遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。</strong></p><h3 id="2-广义的迪米特法则在类的设计上的体现："><a href="#2-广义的迪米特法则在类的设计上的体现：" class="headerlink" title="2. 广义的迪米特法则在类的设计上的体现："></a>2. 广义的迪米特法则在类的设计上的体现：</h3><ul><li>优先考虑将一个类设置成不变类</li><li>尽量降低一个类的访问权限</li><li>谨慎使用Serializable</li><li>尽量降低成员的访问权限</li></ul><h2 id="四-迪米特法则在设计模式中的应用"><a href="#四-迪米特法则在设计模式中的应用" class="headerlink" title="四. 迪米特法则在设计模式中的应用"></a>四. 迪米特法则在设计模式中的应用</h2><p><strong>设计模式的门面模式（Facade）和中介模式（Mediator），都是迪米特法则的应用</strong></p><h2 id="五-迪米特法则实践"><a href="#五-迪米特法则实践" class="headerlink" title="五. 迪米特法则实践"></a>五. 迪米特法则实践</h2><p><strong>那么在实践中如何做到一个对象应该对其他对象有最少的了解呢？如果我们把一个对象看作是一个人，那么要实现“一个人应该对其他人有最少的了解”，做到两点就足够了： 1.只和直接的朋友交流； 2.减少对朋友的了解。下面就详细说说如何做到这两点。</strong></p><h3 id="1-只和直接的朋友交流"><a href="#1-只和直接的朋友交流" class="headerlink" title="1. 只和直接的朋友交流"></a>1. 只和直接的朋友交流</h3><p><strong>迪米特法则还有一个英文解释是：talk only to your immediate friends（只和直接的朋友交流）。</strong></p><p><strong>什么是朋友呢？</strong></p><p><strong>每个对象都必然会与其他的对象有耦合关系，两个对象之间的耦合就会成为朋友关系。那么什么又是直接的朋友呢？出现在****成员变量</strong>、<strong>方法的输入输出参数</strong>中的类就是直接的朋友。迪米特法则要求只和直接的朋友通信。</p><blockquote><p><strong>注意： 只出现在方法体内部的类就不是直接的朋友，如果一个类和不是直接的朋友进行交流，就属于违反迪米特法则。</strong></p></blockquote><p><strong>我们举一个例子说明什么是朋友，什么是直接的朋友。很简单的例子：老师让班长清点全班同学的人数。这个例子中总共有三个类：老师Teacher、班长GroupLeader和学生Student。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITeacher</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(IGroupLeader groupLeader)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITeacher</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(IGroupLeader groupLeader)</span> &#123;<br>        <span class="hljs-comment">// 全班同学</span><br>        List&lt;Student&gt; allStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        <span class="hljs-comment">// 班长清点人数</span><br>        groupLeader.count(allStudent);<br><br>    &#125;<br>&#125;<br><br>**<br> * 班长类<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IGroupLeader</span> &#123;<br><br>    <span class="hljs-comment">// 班长清点人数</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">(List&lt;Student&gt; students)</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupLeader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGroupLeader</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班长清点人数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> students</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">(List&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        System.out.println(<span class="hljs-string">&quot;上课的学生人数是: &quot;</span> + students.size());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStudent</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStudent</span> &#123;<br><br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 老师类</span><br>        <span class="hljs-type">ITeacher</span> <span class="hljs-variable">wangTeacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br><br>        <span class="hljs-comment">// 班长</span><br>        <span class="hljs-type">IGroupLeader</span> <span class="hljs-variable">zhangBanzhang</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupLeader</span>();<br>        wangTeacher.command(zhangBanzhang);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><blockquote><p><strong>上课的学生人数是: 5</strong></p></blockquote><p><strong>在这个例子中，我们的Teacher有几个朋友？两个，一个是GroupLeader，它是Teacher的command()方法的入参；另一个是Student，因为在Teacher的command()方法体中使用了Student。</strong></p><p><strong>那么Teacher有几个是直接的朋友？按照直接的朋友的定义</strong></p><blockquote><p><strong>出现在成员变量、方法的输入输出参数中的类就是直接的朋友</strong></p></blockquote><p><strong>只有GroupLeader是Teacher的直接的朋友。</strong></p><p><strong>Teacher在command()方法中创建了Student的数组，和非直接的朋友Student发生了交流，所以，上述例子****违反了迪米特法则</strong>。方法是类的一个行为，类竟然不知道自己的行为与其他的类产生了依赖关系，这是不允许的，<strong>严重违反了迪米特法则</strong>！</p><p><strong>为了使上述例子符合迪米特法则，我们可以做如下修改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITeacher</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(IGroupLeader groupLeader)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITeacher</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(IGroupLeader groupLeader)</span> &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        groupLeader.count();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IGroupLeader</span> &#123;<br>    <span class="hljs-comment">// 班长清点人数</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupLeader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGroupLeader</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GroupLeader</span><span class="hljs-params">(List&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-built_in">this</span>.students = students;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班长清点人数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        System.out.println(<span class="hljs-string">&quot;上课的学生人数是: &quot;</span> + students.size());<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStudent</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStudent</span> &#123;<br><br><br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 老师类</span><br>        <span class="hljs-type">ITeacher</span> <span class="hljs-variable">wangTeacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br><br>        List&lt;Student&gt; allStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">10</span>);<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br><br>        <span class="hljs-comment">// 班长</span><br>        <span class="hljs-type">IGroupLeader</span> <span class="hljs-variable">zhangBanzhang</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupLeader</span>(allStudent);<br>        wangTeacher.command(zhangBanzhang);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><blockquote><p><strong>上课的学生人数是: 4</strong></p></blockquote><p><strong>这样修改后，每个类都只和直接的朋友交流，有效减少了类之间的耦合</strong></p><h3 id="2-减少对朋友的了解"><a href="#2-减少对朋友的了解" class="headerlink" title="2. 减少对朋友的了解"></a>2. 减少对朋友的了解</h3><p><strong>如何减少对朋友的了解？如果你的朋友是个话痨加大喇叭，那就算你不主动去问他，他也会在你面前说个不停，把他所有的经历都讲给你听。所以，要减少对朋友的了解，请换一个内敛一点的朋友吧～****换作在一个类中，就是尽量减少一个类对外暴露的方法。</strong></p><p><strong>举一个简单的例子说明一个类暴露方法过多的情况。一个人用咖啡机煮咖啡的过程，例子中只有两个类，一个是人，一个是咖啡机。</strong></p><p><strong>首先是咖啡机类CoffeeMachine，咖啡机制作咖啡只需要三个方法：1.加咖啡豆；2.加水；3.制作咖啡：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机抽象接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCoffeeBean</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWater</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeMachine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICoffeeMachine</span>&#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCoffeeBean</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;放咖啡豆&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWater</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加水&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;制作咖啡&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人, 制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMan</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMan</span> &#123;<br>    <span class="hljs-keyword">private</span> ICoffeeMachine coffeeMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Man</span><span class="hljs-params">(ICoffeeMachine coffeeMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coffeeMachine = coffeeMachine;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span> &#123;<br>        coffeeMachine.addWater();<br>        coffeeMachine.addCoffeeBean();<br>        coffeeMachine.makeCoffee();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ICoffeeMachine</span> <span class="hljs-variable">coffeeMachine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeMachine</span>();<br><br>        <span class="hljs-type">IMan</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(coffeeMachine);<br>        man.makeCoffee();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><blockquote><p><strong>加水 放咖啡豆 制作咖啡</strong></p></blockquote><p><strong>在这个例子中，CoffeeMachine是Man的直接好友，但问题是Man对CoffeeMachine了解的太多了，其实人根本不关心咖啡机具体制作咖啡的过程。所以我们可以作如下优化：</strong></p><p><strong>优化后的咖啡机类，只暴露一个work方法，把制作咖啡的三个具体的方法addCoffeeBean、addWater、makeCoffee设为私有:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机抽象接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//咖啡机工作</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeMachine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCoffeeBean</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;放咖啡豆&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWater</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加水&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;制作咖啡&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        addCoffeeBean();<br>        addWater();<br>        makeCoffee();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人, 制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMan</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMan</span> &#123;<br>    <span class="hljs-keyword">private</span> ICoffeeMachine coffeeMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Man</span><span class="hljs-params">(ICoffeeMachine coffeeMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coffeeMachine = coffeeMachine;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">()</span> &#123;<br>        coffeeMachine.work();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ICoffeeMachine</span> <span class="hljs-variable">coffeeMachine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeMachine</span>();<br><br>        <span class="hljs-type">IMan</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(coffeeMachine);<br>        man.makeCoffee();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这样修改后，通过减少CoffeeMachine对外暴露的方法，减少Man对CoffeeMachine的了解，从而降低了它们之间的耦合。</strong></p><p><strong>在实践中，只要做到只和直接的朋友交流和减少对朋友的了解，就能满足迪米特法则。因此我们不难想象，迪米特法则的目的，是把我们的类变成一个个“肥宅”。“肥”在于一个类对外暴露的方法可能很少，但是它内部的实现可能非常复杂（这个解释有点牵强~）。“宅”在于它只和直接的朋友交流。在现实生活中“肥宅”是个贬义词，在日本“肥宅”已经成为社会问题。但是在程序中，一个“肥宅”的类却是优秀类的典范。</strong></p><h2 id="六-注意事项"><a href="#六-注意事项" class="headerlink" title="六. 注意事项"></a>六. 注意事项</h2><ul><li>第一：在类的划分上，应当创建弱耦合的类，类与类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及</li><li>第二：在类的结构设计上，每个类都应该降低成员的访问权限。</li><li>第三：在类的设计上，只要有可能，一个类应当设计成不变的类。</li><li>第四：在对其他类的引用上，一个对象对其他类的对象的引用应该降到最低。</li><li>第五：尽量限制局部变量的有效范围，降低类的访问权限。</li></ul><p><a href="https://cloud.tencent.com/developer/article/1836752">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git设置Github代理</title>
    <link href="/proxy/github.html"/>
    <url>/proxy/github.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、代理设置"><a href="#一、代理设置" class="headerlink" title="一、代理设置"></a>一、代理设置</h2><h3 id="1、全局代理设置"><a href="#1、全局代理设置" class="headerlink" title="1、全局代理设置"></a>1、全局代理设置</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> https:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p>这里可以打开clash查看代理设置，查看自己的端口是否为1080，不是的改为对应的端口</p><h3 id="2、只对GitHub进行代理"><a href="#2、只对GitHub进行代理" class="headerlink" title="2、只对GitHub进行代理"></a>2、只对GitHub进行代理</h3><p>如果挂了全局代理，克隆coding之类的国内仓库会变慢，所以我建议使用如下命令，只对GitHub进行代理，对国内的仓库不影响</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> http.https:<span class="hljs-string">//github.com.proxy</span> https:<span class="hljs-string">//127.0.0.1</span><span class="hljs-function">:7890</span><br>git config <span class="hljs-params">--global</span> https.https:<span class="hljs-string">//github.com.proxy</span> https:<span class="hljs-string">//127.0.0.1</span><span class="hljs-function">:7890</span><br></code></pre></td></tr></table></figure><p>如果在输入这条命令之前，已经输入全局代理的话，可以按照二、取消代理的方法进行取消</p><p>注意：以上两点都是对https协议进行代理设置，也就是仅对<code>git clone https://www.github.com/xxxx/xxxx.git</code>这种命令有效。对于SSH协议，也就是<code>git clone git@github.com:xxxxxx/xxxxxx.git</code>这种，依旧是无效的</p><h3 id="3、sock5代理设置"><a href="#3、sock5代理设置" class="headerlink" title="3、sock5代理设置"></a>3、sock5代理设置</h3><p>之前说的是http代理，有人反映ss暴露的是socks5。下面附上socks5代理的方法</p><p>1、首先查看自己socks5的端口号，假设为：127.0.0.1:7890<br>2、输入以下命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> http.https:<span class="hljs-string">//github.com.proxy</span> socks5:<span class="hljs-string">//127.0.0.1</span><span class="hljs-function">:7890</span><br>git config <span class="hljs-params">--global</span> https.https:<span class="hljs-string">//github.com.proxy</span> socks5:<span class="hljs-string">//127.0.0.1</span><span class="hljs-function">:7890</span><br></code></pre></td></tr></table></figure><h2 id="二、取消代理"><a href="#二、取消代理" class="headerlink" title="二、取消代理"></a>二、取消代理</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy<br></code></pre></td></tr></table></figure><h2 id="三、查看已有配置"><a href="#三、查看已有配置" class="headerlink" title="三、查看已有配置"></a>三、查看已有配置</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global -l</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>proxy</category>
      
      <category>GitHub</category>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="/design-pattern/template-method.html"/>
    <url>/design-pattern/template-method.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>模板方法模式（Template Method），定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>在基类中定义算法的不变部分提升了代码复用性</li><li>将通用行为封装在一个地方简化了代码维护</li><li>允许子类覆盖算法的特定步骤增强了代码灵活性</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以偷东西为例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StealingMethod</span> &#123;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">pickTarget</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confuseTarget</span><span class="hljs-params">(String target)</span>;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stealTheItem</span><span class="hljs-params">(String target)</span>;<br>  <span class="hljs-comment">// 模板方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">steal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> pickTarget();<br>    LOGGER.info(<span class="hljs-string">&quot;The target has been chosen as &#123;&#125;.&quot;</span>, target);<br>    confuseTarget(target);<br>    stealTheItem(target);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>偷东西方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubtleMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StealingMethod</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">pickTarget</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;shop keeper&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confuseTarget</span><span class="hljs-params">(String target)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;Approach the &#123;&#125; with tears running and hug him!&quot;</span>, target);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stealTheItem</span><span class="hljs-params">(String target)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;While in close contact grab the &#123;&#125;&#x27;s wallet.&quot;</span>, target);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>偷东西方式二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HitAndRunMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StealingMethod</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">pickTarget</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;old goblin woman&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confuseTarget</span><span class="hljs-params">(String target)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;Approach the &#123;&#125; from behind.&quot;</span>, target);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stealTheItem</span><span class="hljs-params">(String target)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;Grab the handbag and run away fast!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>小偷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HalflingThief</span> &#123;<br><br>  <span class="hljs-keyword">private</span> StealingMethod method;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">HalflingThief</span><span class="hljs-params">(StealingMethod method)</span> &#123;<br>    <span class="hljs-built_in">this</span>.method = method;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">steal</span><span class="hljs-params">()</span> &#123;<br>    method.steal();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeMethod</span><span class="hljs-params">(StealingMethod method)</span> &#123;<br>    <span class="hljs-built_in">this</span>.method = method;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">thief</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HalflingThief</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HitAndRunMethod</span>());<br>    thief.steal();<br>    thief.changeMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubtleMethod</span>());<br>    thief.steal();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">11:06:01.721 [main] INFO com.iluwatar.templatemethod.StealingMethod -- The target has been chosen as old goblin woman.<br>11:06:01.723 [main] INFO com.iluwatar.templatemethod.HitAndRunMethod -- Approach the old goblin woman from behind.<br>11:06:01.723 [main] INFO com.iluwatar.templatemethod.HitAndRunMethod -- Grab the handbag and run away fast!<br>11:06:01.723 [main] INFO com.iluwatar.templatemethod.StealingMethod -- The target has been chosen as shop keeper.<br>11:06:01.723 [main] INFO com.iluwatar.templatemethod.SubtleMethod -- Approach the shop keeper with tears running and hug him!<br>11:06:01.723 [main] INFO com.iluwatar.templatemethod.SubtleMethod -- While in close contact grab the shop keeper&#x27;s wallet.<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>可能导致类的数量增加，使系统更加复杂</li><li>需要仔细设计，以确保公开给子类的步骤是有用和有意义的</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/4a17b156.html"/>
    <url>/4a17b156.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="/design-pattern/prototype.html"/>
    <url>/design-pattern/prototype.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>原型模式（Prototype），用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>与每次new对象相比，每NEW一次，都需要执行 一次构造函数，如果构造函数的执行时间很长，那么多次的执行这个初始化操作就实在是太低效了。 一般在初始化的信息不发生变化的情况下，克隆是 最好的办法。这既隐藏了对象创建的细节，又对性能是大大的提高。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>原型接口，包括copy方法用来实现原型对象的克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">copy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Beast类、OrcBeast类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Prototype</span>&lt;Beast&gt; &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Beast</span><span class="hljs-params">(Beast source)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrcBeast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beast</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String weapon;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrcBeast</span><span class="hljs-params">(OrcBeast orcBeast)</span> &#123;<br>    <span class="hljs-built_in">super</span>(orcBeast);<br>    <span class="hljs-built_in">this</span>.weapon = orcBeast.weapon;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Orcish wolf attacks with &quot;</span> + weapon;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不同原型的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HeroFactory</span> &#123;<br>  Mage <span class="hljs-title function_">createMage</span><span class="hljs-params">()</span>;<br>  Warlord <span class="hljs-title function_">createWarlord</span><span class="hljs-params">()</span>;<br>  Beast <span class="hljs-title function_">createBeast</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroFactoryImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HeroFactory</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Mage mage;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Warlord warlord;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Beast beast;<br><br>  <span class="hljs-keyword">public</span> Mage <span class="hljs-title function_">createMage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mage.copy();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Warlord <span class="hljs-title function_">createWarlord</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> warlord.copy();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Beast <span class="hljs-title function_">createBeast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> beast.copy();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroFactoryImpl</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfMage</span>(<span class="hljs-string">&quot;cooking&quot;</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfWarlord</span>(<span class="hljs-string">&quot;cleaning&quot;</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElfBeast</span>(<span class="hljs-string">&quot;protecting&quot;</span>)<br>    );<br>    <span class="hljs-type">var</span> <span class="hljs-variable">mage</span> <span class="hljs-operator">=</span> factory.createMage();<br>    <span class="hljs-type">var</span> <span class="hljs-variable">warlord</span> <span class="hljs-operator">=</span> factory.createWarlord();<br>    <span class="hljs-type">var</span> <span class="hljs-variable">beast</span> <span class="hljs-operator">=</span> factory.createBeast();<br>    LOGGER.info(mage.toString());<br>    LOGGER.info(warlord.toString());<br>    LOGGER.info(beast.toString());<br><br>    factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroFactoryImpl</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrcMage</span>(<span class="hljs-string">&quot;axe&quot;</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrcWarlord</span>(<span class="hljs-string">&quot;sword&quot;</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrcBeast</span>(<span class="hljs-string">&quot;laser&quot;</span>)<br>    );<br>    mage = factory.createMage();<br>    warlord = factory.createWarlord();<br>    beast = factory.createBeast();<br>    LOGGER.info(mage.toString());<br>    LOGGER.info(warlord.toString());<br>    LOGGER.info(beast.toString());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">08:36:19.012 [main] INFO com.iluwatar.prototype.App -- Elven mage helps in cooking<br>08:36:19.013 [main] INFO com.iluwatar.prototype.App -- Elven warlord helps in cleaning<br>08:36:19.014 [main] INFO com.iluwatar.prototype.App -- Elven eagle helps in protecting<br>08:36:19.014 [main] INFO com.iluwatar.prototype.App -- Orcish mage attacks with axe<br>08:36:19.014 [main] INFO com.iluwatar.prototype.App -- Orcish warlord attacks with sword<br>08:36:19.014 [main] INFO com.iluwatar.prototype.App -- Orcish wolf attacks with laser<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>需要深拷贝，原型对象的属性又非常复杂的场景，原型模式实现克隆可能会比较复杂</li><li>可能出现循环引用的问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>design-pattern</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8接口新特性</title>
    <link href="/f7ff1dcb.html"/>
    <url>/f7ff1dcb.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-JDK8中接口的新增"><a href="#1-JDK8中接口的新增" class="headerlink" title="1. JDK8中接口的新增"></a>1. JDK8中接口的新增</h3><p>在JDK8中针对接口有做增强，在JDK8之前</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">interface 接口名&#123;<br>    静态常量<span class="hljs-comment">;</span><br>    抽象方法<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JDK8之后对接口做了增加，接口中可以有<strong>默认方法</strong>和<strong>静态方法</strong>,并且默认方法和静态方法都是隐式public的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">interface 接口名&#123;<br>静态常量<span class="hljs-comment">;</span><br>抽象方法<span class="hljs-comment">;</span><br>默认方法<span class="hljs-comment">;</span><br>静态方法<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-默认方法"><a href="#2-默认方法" class="headerlink" title="2 默认方法"></a>2 默认方法</h3><h4 id="2-1-为什么要增加默认方法"><a href="#2-1-为什么要增加默认方法" class="headerlink" title="2.1 为什么要增加默认方法"></a>2.1 为什么要增加默认方法</h4><blockquote><p>在JDK8以前接口中只能有抽象方法和静态常量，会存在以下的问题： 如果接口中新增抽象方法，那么实现类都必须要抽象这个抽象方法，非常不利于接口的扩展的 接口中新增抽象方法，所有实现类都需要重写这个方法，不利于接口的扩展</p></blockquote><h4 id="2-2-接口默认方法的格式"><a href="#2-2-接口默认方法的格式" class="headerlink" title="2.2 接口默认方法的格式"></a>2.2 接口默认方法的格式</h4><p>接口中默认方法的语法格式是</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title class_"><span class="hljs-keyword">interface</span> 接口名</span>&#123;<br>    修饰符 <span class="hljs-keyword">default</span> 返回值类型 方法名&#123;<br>    方法体;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-接口中默认方法的使用"><a href="#2-3-接口中默认方法的使用" class="headerlink" title="2.3 接口中默认方法的使用"></a>2.3 接口中默认方法的使用</h4><p>接口中的默认方法有两种使用方式</p><ol><li>实现类直接调用接口的默认方法</li><li>实现类重写接口的默认方法</li></ol><h3 id="3-静态方法"><a href="#3-静态方法" class="headerlink" title="3. 静态方法"></a>3. 静态方法</h3><p>JDK8中为接口新增了静态方法，作用也是为了接口的扩展</p><h4 id="3-1-语法规则"><a href="#3-1-语法规则" class="headerlink" title="3.1 语法规则"></a>3.1 语法规则</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title class_"><span class="hljs-keyword">interface</span> 接口名</span>&#123;<br>    修饰符 <span class="hljs-keyword">static</span> 返回值类型 方法名&#123;<br>    方法体;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-静态方法的使用"><a href="#3-2-静态方法的使用" class="headerlink" title="3.2 静态方法的使用"></a>3.2 静态方法的使用</h4><p>接口中的静态方法在实现类中是不能被重写的，调用的话只能通过接口类型来实现: 接口名.静态方法名();</p><blockquote><p>想信小伙伴们会有这种疑问 那接口中的静态方法能不能被继承呢 就是类实现接口 还能不能调用接口中的静态方法呢</p></blockquote><h3 id="4两者的区别介绍"><a href="#4两者的区别介绍" class="headerlink" title="4两者的区别介绍"></a>4两者的区别介绍</h3><ol><li>默认方法通过实例调用，静态方法通过接口名调用</li><li>默认方法可以被继承，实现类可以直接调用接口默认方法，也可以重写接口默认方法</li><li>静态方法不能被继承，实现类不能重写接口的静态方法，只能使用接口名调用</li></ol><h3 id="Java9中允许接口包含私有方法"><a href="#Java9中允许接口包含私有方法" class="headerlink" title="Java9中允许接口包含私有方法"></a>Java9中允许接口包含私有方法</h3><p>Java9进一步扩展了接口的功能，允许接口包含私有方法（private methods）。这些私有方法只能在接口内部被其他默认方法或静态方法调用，不能被实现了该接口的类直接访问。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>工作中有气无力</title>
    <link href="/653c71e1.html"/>
    <url>/653c71e1.html</url>
    
    <content type="html"><![CDATA[<p>碰到了个el-table合并单元格的问题，给我人整麻了，怎么写都不对，最后还是问AI，我tm，没一点再工作的兴趣</p>]]></content>
    
    
    
    <tags>
      
      <tag>gossip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小问题解决的方法记录</title>
    <link href="/methods.html"/>
    <url>/methods.html</url>
    
    <content type="html"><![CDATA[<h2 id="IDEA-gradle突然报错系统找不到指定的路径-Could-not-read-workspace-metadata-from"><a href="#IDEA-gradle突然报错系统找不到指定的路径-Could-not-read-workspace-metadata-from" class="headerlink" title="IDEA gradle突然报错系统找不到指定的路径  Could not read workspace metadata from"></a>IDEA gradle突然报错系统找不到指定的路径  Could not read workspace metadata from</h2><pre><code class="hljs">直接gradle设置里指定新的gradle user home文件夹，刷新gradle后解决</code></pre><h2 id="postman调试接口404-NOT-FOUND"><a href="#postman调试接口404-NOT-FOUND" class="headerlink" title="postman调试接口404 NOT FOUND"></a>postman调试接口404 NOT FOUND</h2><pre><code class="hljs">[流汗]新模块的gralde依赖没有加到总的app里，一定要加上啊！！！</code></pre><h2 id="SQL中使用CASE-WHEN…THEN…WHEN…THEN……ELSE…END时注意最后要有END"><a href="#SQL中使用CASE-WHEN…THEN…WHEN…THEN……ELSE…END时注意最后要有END" class="headerlink" title="SQL中使用CASE WHEN…THEN…WHEN…THEN……ELSE…END时注意最后要有END"></a>SQL中使用CASE WHEN…THEN…WHEN…THEN……ELSE…END时注意最后要有END</h2>]]></content>
    
    
    <categories>
      
      <category>method</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JS中的一些数组技巧（一）</title>
    <link href="/cc786bc.html"/>
    <url>/cc786bc.html</url>
    
    <content type="html"><![CDATA[<h3 id="克隆数组（浅拷贝）"><a href="#克隆数组（浅拷贝）" class="headerlink" title="克隆数组（浅拷贝）"></a>克隆数组（浅拷贝）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> arr = [..._arr];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, 2]</span><br></code></pre></td></tr></table></figure><h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> arr = [...arr1, ...arr2];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, 2, 3, 4, 5]; </span><br></code></pre></td></tr></table></figure><h3 id="去重数组"><a href="#去重数组" class="headerlink" title="去重数组"></a>去重数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>])];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, null] </span><br></code></pre></td></tr></table></figure><h3 id="混淆数组"><a href="#混淆数组" class="headerlink" title="混淆数组"></a>混淆数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">slice</span>().<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [3, 4, 0, 5, 1, 2] </span><br></code></pre></td></tr></table></figure><h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// []</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [] </span><br></code></pre></td></tr></table></figure><h3 id="截断数组"><a href="#截断数组" class="headerlink" title="截断数组"></a>截断数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">2</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1] </span><br></code></pre></td></tr></table></figure><h3 id="交换赋值"><a href="#交换赋值" class="headerlink" title="交换赋值"></a>交换赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>;<br>[a, b] = [b, a];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b); <span class="hljs-comment">// 1 0 </span><br></code></pre></td></tr></table></figure><h3 id="过滤空值"><a href="#过滤空值" class="headerlink" title="过滤空值"></a>过滤空值</h3><blockquote><p>空值：undefined、null、””、0、false、NaN</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [1, 2] </span><br></code></pre></td></tr></table></figure><h3 id="数组首部插入成员"><a href="#数组首部插入成员" class="headerlink" title="数组首部插入成员"></a>数组首部插入成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">// 以下方法任选一种</span><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// [0, 1, 2]</span><br>arr = [<span class="hljs-number">0</span>].<span class="hljs-title function_">concat</span>(arr); <span class="hljs-comment">// [0, 1, 2]</span><br>arr = [<span class="hljs-number">0</span>, ...arr]; <span class="hljs-comment">// [0, 1, 2]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, 2] </span><br></code></pre></td></tr></table></figure><h3 id="数组尾部插入成员"><a href="#数组尾部插入成员" class="headerlink" title="数组尾部插入成员"></a>数组尾部插入成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]; <span class="hljs-comment">// 以下方法任选一种</span><br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>);<br>arr.<span class="hljs-title function_">concat</span>(<span class="hljs-number">2</span>);<br>arr[arr.<span class="hljs-property">length</span>] = <span class="hljs-number">2</span>;<br>arr = [...arr, <span class="hljs-number">2</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, 2] </span><br></code></pre></td></tr></table></figure><h3 id="统计数组成员个数"><a href="#统计数组成员个数" class="headerlink" title="统计数组成员个数"></a>统计数组成员个数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> count = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">t, v</span>) =&gt;</span> &#123;<br>  t[v] = t[v] ? ++t[v] : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> t;<br>&#125;, &#123;&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count); <span class="hljs-comment">// &#123; 0: 1, 1: 2, 2: 3 &#125; </span><br></code></pre></td></tr></table></figure><h3 id="解构数组成员嵌套"><a href="#解构数组成员嵌套" class="headerlink" title="解构数组成员嵌套"></a>解构数组成员嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]];<br><span class="hljs-keyword">const</span> [a, b, [c, d, [e, f]]] = arr;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c, d, e, f); <span class="hljs-comment">// 0 1 2 3 4 5 </span><br></code></pre></td></tr></table></figure><h3 id="解构数组成员别名"><a href="#解构数组成员别名" class="headerlink" title="解构数组成员别名"></a>解构数组成员别名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-number">0</span>: a, <span class="hljs-number">1</span>: b, <span class="hljs-number">2</span>: c &#125; = arr;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c); <span class="hljs-comment">// 0 1 2 </span><br></code></pre></td></tr></table></figure><h3 id="解构数组成员默认值"><a href="#解构数组成员默认值" class="headerlink" title="解构数组成员默认值"></a>解构数组成员默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> [a, b, c = <span class="hljs-number">3</span>, d = <span class="hljs-number">4</span>] = arr;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c, d); <span class="hljs-comment">// 0 1 2 4 </span><br></code></pre></td></tr></table></figure><h3 id="获取随机数组成员"><a href="#获取随机数组成员" class="headerlink" title="获取随机数组成员"></a>获取随机数组成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> randomItem = arr[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>)];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(randomItem); <span class="hljs-comment">// 输出随机数 </span><br></code></pre></td></tr></table></figure><h3 id="创建指定长度数组"><a href="#创建指定长度数组" class="headerlink" title="创建指定长度数组"></a>创建指定长度数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">keys</span>()];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 1, 2] </span><br></code></pre></td></tr></table></figure><h3 id="创建指定长度且值相等的数组"><a href="#创建指定长度且值相等的数组" class="headerlink" title="创建指定长度且值相等的数组"></a>创建指定长度且值相等的数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [0, 0, 0] </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端的一些tips(一)</title>
    <link href="/23d9b587.html"/>
    <url>/23d9b587.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>为什么要用两个<code>!!</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (!!<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataSourceModel</span>.<span class="hljs-property">dataSourceCode</span> &amp;&amp; !!<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataSourceModel</span>.<span class="hljs-property">pluginType</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">initPage</span>.<span class="hljs-title function_">getPluginType</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用两个感叹号 !! 是为了将变量的值强制转换为布尔类型。 在JavaScript中，!! 可以用来将任何值转换为对应的布尔值。<br>!! 的作用是将一个值转换为其对应的布尔值， 如果值为假值（例如 undefined、null、0、NaN、false、””），则转换为 false，<br>否则转换为 true。</p></li><li><p>js中的函数操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// concat函数 追加数组</span><br><span class="hljs-keyword">let</span> tempCondi =<br>    &#123;<br>        <span class="hljs-attr">baseDataRefs</span>: [],<br>        <span class="hljs-attr">baseDataRefsItem</span>: []<br>    &#125;<br>tempCondi.<span class="hljs-property">baseDataRefs</span> = tempCondi.<span class="hljs-property">baseDataRefs</span>.<span class="hljs-title function_">concat</span>(tempCondi.<span class="hljs-property">baseDataRefsItem</span>);<br><br><span class="hljs-comment">// find函数 找到第一个符号条件的元素</span><br><span class="hljs-comment">// fliter函数 找到符号条件的多个元素</span><br><span class="hljs-comment">// include函数 字符串包含</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcde&quot;</span>;<br><span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;ab&quot;</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;字符串包含 &#x27;ab&#x27;&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;字符串不包含 &#x27;ab&#x27;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>font</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nvm常用命令</title>
    <link href="/37fc8d59.html"/>
    <url>/37fc8d59.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">nvm off                     // 禁用node.js版本管理(不卸载任何东西)<br>nvm on                      // 启用node.js版本管理<br>nvm install &lt;version&gt;       // 安装node.js的命名 version是版本号 例如：nvm install 8.12.0<br>nvm uninstall &lt;version&gt;     // 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用<br>nvm ls                      // 显示所有安装的node.js版本<br>nvm list available          // 显示可以安装的所有node.js的版本<br>nvm use &lt;version&gt;           // 切换到使用指定的nodejs版本<br>nvm v                       // 显示nvm版本<br>nvm install stable          // 安装最新稳定版<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm更新升级</title>
    <link href="/45f6034.html"/>
    <url>/45f6034.html</url>
    
    <content type="html"><![CDATA[<p>1.查看<code>npm</code>当前版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm -v<br></code></pre></td></tr></table></figure><p>2.清理<code>npm</code>缓存数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm cache clean --force<br></code></pre></td></tr></table></figure><p>3.更新到最新版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm install -g npm<br></code></pre></td></tr></table></figure><p>4.更新到指定版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm -g install npm@10.4.0<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm i npm@10.4.0 -g<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nvm&amp;npm更新淘宝镜像源</title>
    <link href="/666010b5.html"/>
    <url>/666010b5.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>淘宝原来的npm镜像网站现在已经更换到了<a href="https://npmmirror.com/">新淘宝镜像站</a>，为此，nvm和npm的配置也需要更新：</p></blockquote><h3 id="nvm目录下settings-txt"><a href="#nvm目录下settings-txt" class="headerlink" title="nvm目录下settings.txt"></a>nvm目录下settings.txt</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">node_mirror: http://npmmirror.com/mirrors/node/ <br>npm_mirror: http://npmmirror.com/mirrors/npm/<br></code></pre></td></tr></table></figure><h3 id="npm设置"><a href="#npm设置" class="headerlink" title="npm设置"></a>npm设置</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">// 1. 清空缓存<br>npm cache clean --force<br>// 2. 切换新源<br>npm config set registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="推荐使用淘宝命令工具cnpm"><a href="#推荐使用淘宝命令工具cnpm" class="headerlink" title="推荐使用淘宝命令工具cnpm"></a>推荐使用淘宝命令工具cnpm</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">//安装cnpm<br>npm install -g cnpm --registry=https://registry.npmmirror.com<br>//检测是否安装成功<br>cnpm -v<br>//安装依赖<br>cnpm install 你的依赖<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm</tag>
      
      <tag>淘宝镜像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的String类中replace和replaceAll的区别</title>
    <link href="/c5c08fb6.html"/>
    <url>/c5c08fb6.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>In java.lang.String, the replace method either takes a pair of char’s or a pair of CharSequence’s (which String is implementing, so it’ll happily take a pair of String’s). The replace method will replace all occurrences of a char or CharSequence.<br>On the other hand, the first String arguments of replaceFirst and replaceAll are regular expressions (regex).<br>Using the wrong function can lead to subtle bugs.</p></blockquote><h3 id="Relevant-sections-from-java-lang-String"><a href="#Relevant-sections-from-java-lang-String" class="headerlink" title="Relevant sections from java.lang.String:"></a>Relevant sections from java.lang.String:</h3><ul><li><p>String replace(char oldChar, char newChar)<br>Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar.</p></li><li><p>String replace(CharSequence target, CharSequence replacement)<br>Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.</p></li><li><p>String replaceAll(String regex, String replacement)<br>Replaces each substring of this string that matches the given regular expression with the given replacement.</p></li><li><p>String replaceFirst(String regex, String replacement)<br>Replaces the first substring of this string that matches the given regular expression with the given replacement.</p></li></ul><p><a href="https://stackoverflow.com/questions/10827872/difference-between-string-replace-and-replaceall" title="来自">from</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客同步步骤</title>
    <link href="/sync.html"/>
    <url>/sync.html</url>
    
    <content type="html"><![CDATA[<h2 id="博客同步步骤"><a href="#博客同步步骤" class="headerlink" title="博客同步步骤"></a>博客同步步骤</h2><ol><li>在新电脑上拉取<a href="https://github.com/CodingYourAmbition/CodingYourAmbition.github.io.git">hexosync分支代码</a></li><li>安装nodejs(nvm),git</li><li>安装Hexo和Git插件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br>npm install hexo-deployer-git --save<br>// 永久链接插件<br>npm install hexo-abbrlink --save<br>// Google SEO优化<br>npm install hexo-generator-sitemap --save<br>// BaiDu SEO优化<br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure></li><li>根据package.json安装依赖 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i<br></code></pre></td></tr></table></figure></li><li>运行<code>hexo g</code>，渲染生成，运行<code>hexo s</code>，预览网站</li><li>运行<code>hexo new post</code>编写新文章，或者修改博客其他内容</li><li>将新内容提交推送到Github，并运行<code>hexo g -d</code>进行部署</li><li>新内容自动部署到Github的main分支， 在<code>codingyourambition.github.io</code>查看内容</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>synctest</title>
    <link href="/2b5a1e45.html"/>
    <url>/2b5a1e45.html</url>
    
    <content type="html"><![CDATA[<h2 id="测试多端同步"><a href="#测试多端同步" class="headerlink" title="测试多端同步"></a>测试多端同步</h2>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/7a6a6b5a.html"/>
    <url>/7a6a6b5a.html</url>
    
    <content type="html"><![CDATA[<p>s1mple远古头像</p>]]></content>
    
    
    <categories>
      
      <category>Photo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>s1mple</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
